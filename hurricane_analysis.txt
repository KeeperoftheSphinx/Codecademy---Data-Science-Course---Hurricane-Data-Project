 # names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

conversion = {'M' : 1000000, 'B' : 1000000000}

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

mortality_scale = {
  0: 0,
  1: 100,
  2: 500,
  3: 1000,
  4: 10000,
}


# write your update damages function here:


def update_damages(damages, conversion):
  updated_damages = []
  for value in damages:
    if value == 'Damages not recorded':
      updated_damages.append(value)
    else:
      updated_value = float(value[:-1])*conversion[value[-1]]
      updated_damages.append(updated_value)

  return updated_damages

print(update_damages(damages, conversion))





# write your construct hurricane dictionary function here:

def construct_hurricane_dict():
  hurricane_dict = {}

  for name, year, month, max_wind, area_affected, damage, death in zip(names, years, months, max_sustained_winds, areas_affected, damages, deaths):

    hurricane_dict[name] = {
      'Year' : year,
      'Month' : month,
      'Max. sustained wind' : max_wind,
      'Areas affected' : area_affected,
      'Damages' : damage,
      'Deaths' : death
    }

  return hurricane_dict

hurricane_data = construct_hurricane_dict()


# write your construct hurricane by year dictionary function here:


def construct_dict_by_year(years):
  dictionary = {}
  unique_years = set(years)

  for unique_year in unique_years:
    dictionary[unique_year] = []

    for year, name, month, max_wind, area_affected, damage in zip(years, names, months, max_sustained_winds, areas_affected, damages):
      if year == unique_year:
   
        hurricane_dictionary = {
          'Name' : name,
          'Year' : year,
          'Month' : month,
          'Max. sustained wind' : max_wind,
          'Areas affected' : area_affected,
          'Damages' : damage
        }
        dictionary[unique_year].append(hurricane_dictionary)
      


  return dictionary

#print(construct_dict_by_year(years))


# write your count affected areas function here:

def construct_area_dictionary(areas_affected):
  area_dictionary = {}

  for list in areas_affected:
    for area in list:
      if area not in area_dictionary:
        area_dictionary.update({area : 0})

  return area_dictionary

def count_of_areas_affected(areas_affected):

  area_dictionary = construct_area_dictionary(areas_affected)
  flattened_list = [area for sublist in areas_affected for area in sublist]

  for area in flattened_list:
    if area in area_dictionary:
      area_dictionary[area] += 1

  return area_dictionary

print(count_of_areas_affected(areas_affected))

  
# write your find most affected area function here:

def most_hit_area(area_dictionary):
  most_times_hit = max(area_dictionary.values())
  most_hit_area = max(area_dictionary.keys())

  print(" The most hit area was {} (hit {} times.)".format(most_hit_area, most_times_hit))

most_hit_area(count_of_areas_affected(areas_affected))


# write your greatest number of deaths function here:

def greatest_num_deaths(hurricane_dictionary):
  

  greatest_deaths_hurricane = max(hurricane_dictionary.items(), key = lambda item : item[1]['Deaths'])
  
  hurricane_name, max_death_info = greatest_deaths_hurricane
  greatest_death_count = max_death_info['Deaths']

  print(f"The hurricane that inflicted the greatest number of deaths was {hurricane_name}. The total number of deaths suffered was {greatest_death_count}.")

greatest_num_deaths(construct_hurricane_dict())

# write your catgeorize by mortality function here:

def assign_mortality_rating(hurricane_data, mortality_scale):

  mortality_rank = {}

  for key in mortality_scale:
    mortality_rank[key] = []

  for key in hurricane_data:
    if hurricane_data[key]['Deaths'] == 0:
      entry = {key : hurricane_data[key]['Year'] }
      mortality_rank[0].append(entry)

    elif hurricane_data[key]['Deaths'] <= 100:
      entry = {key : hurricane_data[key]['Year'] }
      mortality_rank[1].append(entry)

    elif hurricane_data[key]['Deaths'] <= 500:
      entry = {key : hurricane_data[key]['Year'] }
      mortality_rank[2].append(entry)

    elif hurricane_data[key]['Deaths'] <= 1000:
      entry = {key : hurricane_data[key]['Year'] }
      mortality_rank[3].append(entry)

    elif hurricane_data[key]['Deaths'] <= 10000:
      entry = {key : hurricane_data[key]['Year'] }
      mortality_rank[4].append(entry)
  
  print("See every hurricane by mortality ranking and the year in which it occurred:")
  for key in mortality_rank:
    print(f"Rank {key} hurricanes:")
    for item in mortality_rank[key]:
        print(item)
   

assign_mortality_rating(construct_hurricane_dict(), mortality_scale)

# write your greatest damage function here:

def convert_damages(hurricane_data):

  conversion = {'M' : 1000000, 'B' : 1000000000}
  for key in hurricane_data:
    if hurricane_data[key]['Damages'] == 'Damages not recorded':
      hurricane_data[key]['Damages'] = 0
    else:
      damage_value = float(hurricane_data[key]['Damages'][:-1])*conversion[hurricane_data[key]['Damages'][-1]]
      hurricane_data[key]['Damages'] = damage_value

def greatest_damage(hurricane_data):

  convert_damages(hurricane_data)

  most_damaging_hurricane = max(hurricane_data.items(), key = lambda item : item[1]['Damages'])

  hurricane_name, hurricane_info = most_damaging_hurricane
  greatest_damage = hurricane_info['Damages']

  print(f'The most damagin hurricane was {hurricane_name}, which inflicted ${greatest_damage} worth of damages')



# write your catgeorize by damage function here:

damage_scale = {
  0: 0,
  1: 100000000,
  2: 1000000000,
  3: 10000000000,
  4: 500000000000
}

def assign_damage_rating(hurricane_data, damage_scale):

  convert_damages(hurricane_data)

  damage_rank = {}

  for key in damage_scale:
    damage_rank[key] = []

  for key in hurricane_data:
    if hurricane_data[key]['Damages'] == 0:
      entry = {key : hurricane_data[key]['Damages'] }
      damage_rank[0].append(entry)

    elif hurricane_data[key]['Damages'] <= 100000000:
      entry = {key : hurricane_data[key]['Damages'] }
      damage_rank[1].append(entry)

    elif hurricane_data[key]['Damages'] <= 1000000000:
      entry = {key : hurricane_data[key]['Damages'] }
      damage_rank[2].append(entry)

    elif hurricane_data[key]['Damages'] <= 10000000000:
      entry = {key : hurricane_data[key]['Damages'] }
      damage_rank[3].append(entry)

    elif hurricane_data[key]['Damages'] <= 50000000000:
      entry = {key : hurricane_data[key]['Damages'] }
      damage_rank[4].append(entry)
  
  print("See every hurricane by damage ranking and the amount of damage incurred in USD:")

  for key in damage_rank:
    print(f"Rank {key} hurricanes:")
    for item in damage_rank[key]:
        print(item)

assign_damage_rating(hurricane_data, damage_scale)






